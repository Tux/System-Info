.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man v6.0.2 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Required to disable full justification in groff 1.23.0.
.if n .ds AD l
.\" ========================================================================
.\"
.IX Title "System::Info::Linux 3"
.TH System::Info::Linux 3 2024-08-23 "perl v5.40.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
System::Info::Linux \- Object for specific Linux info.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
.ie n .SS $si\->prepare_sysinfo
.el .SS \f(CW$si\fP\->prepare_sysinfo
.IX Subsection "$si->prepare_sysinfo"
Use os\-specific tools to find out more about the system.
.ie n .SS $si\->prepare_os
.el .SS \f(CW$si\fP\->prepare_os
.IX Subsection "$si->prepare_os"
Use os\-specific tools to find out more about the operating system.
.ie n .SS $si\->linux_generic
.el .SS \f(CW$si\fP\->linux_generic
.IX Subsection "$si->linux_generic"
Check \f(CW\*(C`/proc/cpuinfo\*(C'\fR for these keys:
.IP """processor""  (count occurrence for _\|_cpu_count)" 4
.IX Item """processor"" (count occurrence for __cpu_count)"
.PD 0
.IP """model name"" (part of _\|_cpu)" 4
.IX Item """model name"" (part of __cpu)"
.IP """vendor_id""  (part of _\|_cpu)" 4
.IX Item """vendor_id"" (part of __cpu)"
.IP """cpu mhz""    (part of _\|_cpu)" 4
.IX Item """cpu mhz"" (part of __cpu)"
.IP """cpu cores""  (add values to add to _\|_cpu_count)" 4
.IX Item """cpu cores"" (add values to add to __cpu_count)"
.PD
.ie n .SS $si\->linux_arm
.el .SS \f(CW$si\fP\->linux_arm
.IX Subsection "$si->linux_arm"
Check \f(CW\*(C`/proc/cpuinfo\*(C'\fR for these keys:
.IP """processor""  (count occurrence for _\|_cpu_count)" 4
.IX Item """processor"" (count occurrence for __cpu_count)"
.PD 0
.IP """Processor"" (part of _\|_cpu)" 4
.IX Item """Processor"" (part of __cpu)"
.IP """BogoMIPS""  (part of _\|_cpu)" 4
.IX Item """BogoMIPS"" (part of __cpu)"
.PD
.ie n .SS $si\->linux_ppc
.el .SS \f(CW$si\fP\->linux_ppc
.IX Subsection "$si->linux_ppc"
Check \f(CW\*(C`/proc/cpuinfo\*(C'\fR for these keys:
.IP """processor""  (count occurrence for _\|_cpu_count)" 4
.IX Item """processor"" (count occurrence for __cpu_count)"
.PD 0
.IP """cpu""     (part of _\|_cpu)" 4
.IX Item """cpu"" (part of __cpu)"
.IP """machine"" (part of _\|_cpu)" 4
.IX Item """machine"" (part of __cpu)"
.IP """clock""   (part of _\|_cpu)" 4
.IX Item """clock"" (part of __cpu)"
.IP """detected"" (alters machine if present)" 4
.IX Item """detected"" (alters machine if present)"
.PD
.ie n .SS $si\->linux_sparc
.el .SS \f(CW$si\fP\->linux_sparc
.IX Subsection "$si->linux_sparc"
Check \f(CW\*(C`/proc/cpuinfo\*(C'\fR for these keys:
.IP """processor""  (count occurrence for _\|_cpu_count)" 4
.IX Item """processor"" (count occurrence for __cpu_count)"
.PD 0
.IP """cpu""        (part of _\|_cpu)" 4
.IX Item """cpu"" (part of __cpu)"
.IP """Cpu0ClkTck"" (part of _\|_cpu)" 4
.IX Item """Cpu0ClkTck"" (part of __cpu)"
.PD
.ie n .SS $si\->linux_s390x
.el .SS \f(CW$si\fP\->linux_s390x
.IX Subsection "$si->linux_s390x"
Check \f(CW\*(C`/proc/cpuinfo\*(C'\fR for these keys:
.IP """processor""  (count occurrence for _\|_cpu_count)" 4
.IX Item """processor"" (count occurrence for __cpu_count)"
.PD 0
.IP """Processor"" (part of _\|_cpu)" 4
.IX Item """Processor"" (part of __cpu)"
.IP """BogoMIPS""  (part of _\|_cpu)" 4
.IX Item """BogoMIPS"" (part of __cpu)"
.PD
.ie n .SS $si\->prepare_proc_cpuinfo
.el .SS \f(CW$si\fP\->prepare_proc_cpuinfo
.IX Subsection "$si->prepare_proc_cpuinfo"
Read the complete \f(CW\*(C`/proc/cpuinfo\*(C'\fR.
.ie n .SS "$si\->count_in_cpuinfo ($regex)"
.el .SS "\f(CW$si\fP\->count_in_cpuinfo ($regex)"
.IX Subsection "$si->count_in_cpuinfo ($regex)"
Returns the number of lines \f(CW$regex\fR matches for.
.ie n .SS "$si\->count_unique_in_cpuinfo ($regex)"
.el .SS "\f(CW$si\fP\->count_unique_in_cpuinfo ($regex)"
.IX Subsection "$si->count_unique_in_cpuinfo ($regex)"
Returns the number of lines \f(CW$regex\fR matches for.
.ie n .SS "$si\->from_cpuinfo ($key)"
.el .SS "\f(CW$si\fP\->from_cpuinfo ($key)"
.IX Subsection "$si->from_cpuinfo ($key)"
Returns the first value of that key in \f(CW\*(C`/proc/cpuinfo\*(C'\fR.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
(c) 2016\-2024, Abe Timmerman & H.Merijn Brand, All rights reserved.
.PP
With contributions from Jarkko Hietaniemi, Campo Weijerman, Alan Burlison,
Allen Smith, Alain Barbet, Dominic Dunlop, Rich Rauenzahn, David Cantrell.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
See:
.IP \(bu 4
<http://www.perl.com/perl/misc/Artistic.html>
.IP \(bu 4
<http://www.gnu.org/copyleft/gpl.html>
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
